<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>John Behnke</title><description>John Behnke's personal website</description><link>https://behnke.dev</link><language>en</language><lastBuildDate>Sun, 12 Mar 2023 23:15:40 -0400</lastBuildDate><pubDate>Sun, 12 Mar 2023 23:15:40 -0400</pubDate><ttl>250</ttl><atom:link href="https://behnke.dev/post.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://behnke.dev/posts/2023/03/12/hello_world</guid><title>Hello World!</title><description>Creating a website in Swift via Publish.</description><link>https://behnke.dev/posts/2023/03/12/hello_world</link><pubDate>Sat, 2 May 2020 19:56:00 -0400</pubDate><content:encoded><![CDATA[<p>Ever since I built this website back in November 2016, it has been a single HTML page with inline CSS. Why so simple? While I can do front-end development, I wouldn’t call myself a front-end developer. I’ve always gravitated towards dealing with data in the backend over flexing boxes and slinging divs. So when it came time to build out a personal portfolio/resume site, I grabbed some of the css from the wonderful <a href="http://bettermotherfuckingwebsite.com">bettermotherfuckingwebsite</a>, tweaked it a bit, slapped by face on it, got roasted by buddy for using body tags like divs, and called it a day. From 2016 until about the middle of last year, thats how it stayed, save for I think two redesigns and some content upates.<br><br> <img src="https://behnke.dev/images/posts/2023/03/12/old_site_1.jpg"/> <em> The oldest version the site, complete with mid 2010's "card" styling </em><br> <img src="https://behnke.dev/images/posts/2023/03/12/old_site_2.jpg"/> <em> In 2017, I added particles.js along with a border to the profile picture that would randomly select from some colors </em><br> <img src="https://behnke.dev/images/posts/2023/03/12/old_site_3.jpg"/> <em> In April of 2020, a month into COVID-19 lockdowns, I ripped out most of the site and made it a lot simpler. </em><br><br>While I don't like doing front-end work <em>on the web</em>, I actually don't mind doing it for Apple's platforms, especically since SwiftUI came out in 2019. I don't know <em>why</em> exactly, but at least part of the issue is that I don't like HTML+CSS. Ideally, I'd be able to write my personal site in some Swift-related stack. For a little bit I toyed around with the idea creating my own static site generator.</p><p>Thankfully I didn’t have to.</p><p>Around the end of December in 2019, John Sundell, a prolific Swift developer/guru and podcaster released his open source static site generator written in Swift, called <a href="https://github.com/johnsundell/publish">Publish</a>. Having heard him talk about creating Publish on the podcasts he hosts, I was extremely interested in giving it a shot. In May of 2020, a few months into the crazy world of COVID-19, I decided to dive in.</p><p>It's 2023 now... roughly three years later. What gives? Well a couple of things actually.</p><p>Publish was still relativly new at the time and the documentation around it wasn't particulary the comprehensive, escpecically compared to other static site generators</p><ul><li>My initial</li></ul><p>-May 2020, I started the redesign in Publish<br><br>- Talk about the difficulty of using a new framework with having to design the site at the same time - Talk about the awkwardness of the initial API - Talk about after SwiftUI came out, John Sundell released a newer API and that made building the components easier - Give an overall impression of Publish (mention that I may go deeper into this in another post) - Talk about why starting to “blog” (good practice for writing, maybe I’ll write about something someone finds useful, etc) - Talk about future plans for the site (at least 12 posts a year, have links to side projects, astrobehnke.space)</p>]]></content:encoded></item></channel></rss>